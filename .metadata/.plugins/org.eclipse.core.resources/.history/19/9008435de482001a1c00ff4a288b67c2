package com.mars.parser;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.mars.executer.ForwardMoveExecuter;
import com.mars.executer.GenericExecuter;
import com.mars.executer.SpinLeftExecuter;
import com.mars.executer.SpinRightExecuter;

public class ToStringParser {
	
	    public static final String CHARACTER = "";
	    public static final int INDEX = 0;

	    private static Map<String, GenericExecuter> map = new HashMap<String, GenericExecuter>() {{
	        put("L", new SpinLeftExecuter());
	        put("R", new SpinRightExecuter());
	        put("M", new ForwardMoveExecuter());
	    }};

	    private String value;

	    public ToStringParser(final String value) {
	        this.value = value;
	    }

	    public List<GenericExecuter> toCommands() {
		if (null == value || value.trim().length() == 0) {
			return new ArrayList<GenericExecuter>();
		}
	        return buildCommandsList(value);
	    }

	    private List<GenericExecuter> buildCommandsList(final String value) {
	        List<GenericExecuter> genericExecuter = new ArrayList<GenericExecuter>();

	        for(String character : charactersFrom(value)) {
	            if (character == null) break;
	            GenericExecuter mapped = control(character.toUpperCase());
	            genericExecuter.add(mapped);
	        }

	        return genericExecuter;
	    }

	    private String[] charactersFrom(final String value) {
	        return Arrays.copyOfRange(value.split(CHARACTER), INDEX, value.length() + 1);
	    }

	    private GenericExecuter control(final String value) {
	        return map.get(value);
	    }

}
